INTERNAL LIST OF STUFF DONE:
2.0:
- use BIOS for joystick handling, works like charm on DOSBox
- implemented network timeout handler for sync & play match menu
- added 2nd synchronization, right before play game, so it's not possible for other player to be left in menus
- lineup and tactics from play match menu are now saved in options (for up to 5 different teams)
- player shirt number range extended up to 255
- fixed problem when both players play with the same team
- fixed players unable to be swapped before the match after the first game
- fixed showing error dialog in infinite loop when failing to connect to lobby in direct connect mode
- improved getaddr script to look up SWOS addresses too
- using precompiled headers now, but they seem not to be of much help (now build seems even slower by ~1 second)
- fixed empty entry selected when player leaves game in game lobby and cursor is on their name
- fixed bug when player was unable to change line up in play match menu after
  first game
- fixed game length being too short compared to Amiga version
- fixed bug where options would get reset on each program start
- fixed bug when controls would lock up on 2nd entry into setup teams menu
- created test.txt, which contains stuff that needs to be checked before
  releasing a build (hopefully it would become at least partly automated)
- direct connect mode implemented - game goes directly into multiplayer lobby
  if requested from the command line
- command line parameters implemented (for launcher)
- tons of small bugs resulting from the port fixed
- ported everything to GCC, C++11/14/17 here we come!
- some more alink fixes
- added importing dll functions from command line to alink, fixed incorrect
  terminating of import thunks array introduced in conversion while I was at it
- fixed InputText to correctly handle case when input buffer already contains
  string longer than max length
- 68k registers implemented as unions in C, to avoid casts (but disabled, seems
  even more kludgey that way, and might introduce subtle errors)
- comments starting with ### in filter.txt pass over to swossym.h
- 68k register now have their proper names
- when choosing joypad buttons it's possible to cancel special fire (assign
  normal fire to it that is), so guys with Amiga joypad don't need to carry
  mouse anymore ;)
- options are now saved to and loaded from xml file, and checks for
  modifications have been implemented so they're not saved many times
  needlessly anymore; also simple internal format for describing options has
  been introduced
- sprintf is now in release build too
- end program code refactored, assertations now work even with start-up code
- buffered files introduced, built on top of DOS files
- main.asm refactored, looks much better now
- custom tactics added, seems still needs few bug fixes tho
- custom Perl build script for core SWOS++, source directory reorganized, now
  there can be subdirectories, we have debug subdir that only compiles in debug
  build
- crash log handler
- DOSBox detection
- assert support
- static_assert support
- util.c introduced and it will contain all utility functions so they wouldn't
  be all over the place
- options are now saved when game is exited via ALT-F1
- SWOS2004 removed
- fixed (finally!) bug in recording friendly game replays - if players selects
  replay after the game, recording would contain all games combined
- patched: size mismatch - capital S!
- now video memory testing is done at startup (same algorithm as install.exe) so
  cursor doesn't blink like crazy in menus (also useful when game is ran from
  both DOSBox and VMWare from the same directory)
- now error-ok modal dialog has small animation, player that gets sad ;)
- added "support" for DOSBox (for public change log)
- added support for %hhd/%hhx to printf, and on that note bug fixed - field
  specification wasn't getting reset between fields
- created Perl script that checks for unused symbols from filter.txt (via simple
  text search), removed unneeded obsolete symbols
- fixed redundant saving to options.dat in case options weren't changed
- %#s options added to printf (print string as hex)
- created Perl script to check if there is risky usage of calla (say a call
  through eax register in which function expects a parameter)
- removed redundant places for options patching, now it's just right
- introduced debug message classes, now it's bit less chaotic
- fixed bug with alt-F1, now it will return to previous graphics mode (ah wasn't
  set before the int 0x10 call) + now we can write a message with assert_msg
- fixed game freezing if no key was pressed at the startup, while animations
  were showing - now it will nicely switch to main menu (this is Frankenstein
  SWOS bug only)
- fixed: controls lock up completely if 2nd player on keyboard is activated
  inside SWOS++ and later turned off from the install (keyboard only is set or
  keyboard+joypad) [in this case deletion of OPTIONS.DAT solved the problem]
  (so now joyKbdWord gets set to 4 (kbd+joy) if pl2Keyboard is true)
- disabled function keys during the game if they were chosen to control player 1
  or 2 (for example, S for statistics, P for pause - they won't have their
  function if any player is using them)
- desync fixed (for good! I hope) between consecutive games - fucking frameCount
  wasn't reset
- fixed player substitutes before the game, lord praise cpu log compare
  debugging technique
- server didn't properly initialize its player, which resulted in sending flags
  from previous game to newly connected clients
- fixed buggie in the case when server refused connection
- switched to own 64kb stack
- fixed section ordering bug, binary file is now slightly smaller
- display of debug variables on/off by pressing `d'

1.4:
- resetting number of highlights to one after replay is saved is fixed, as well
  as crash in view highlights after the save (I used highlights buffer for
  copying) - in short now replays and highlight coexist peacefully together in
  harmony
- load addresses of SWOS and SWOS++ logged at startup so we can find exact
  instruction in case of crash
- fixed: there are no highlights, but after watching a replay one highlight
  shows up
- fixed replay file when game is shut down abruptly (with alt-f1 for example)
- fixed nasty bug that was causing corruption of *.rpl files - recording while
  bench is shown is disabled and deletion of recording buffer is removed - now
  rpl's work as they are supposed to, alto I will try to pause recording once
  the camera reaches the bench and spends one frame there
- little buggie fixed in CloseReplayFile when error is set at the very beginning
  but not reset in case the file wasn't open; that causes false warning when
  playing next replay
- error checking during replay reproduction moved to ReplaysInit, or error is
  shown only when next replay is played
- 'f' speeds up replays, and they're zooming by real fast :)
- screen dump on f2 - revived old debug option, it's saving to *.256 format
- joypad auto-detection moved to startup, and if joypad wasn't found controls
  are set to keyboard only or joypad + keyboard if only one joypad is present

1.2:
- version.inc file created containing macro ver that returns version number so
  maintaining is much easier - it's still not working because of idiotic
  assembler
- FatalError(char *msg) procedure added for forced SWOS exit
- finally resolved devilish problem with vsprintf(__prtf_) - same symbol was
  defined in SWOS section as well, which had priority over library symbols and
  that resulted in generation of jump into nothingness; so now I've created a
  filter and only symbols that it contains are part of the assembly process, we
  also have an optional name prefix for avoiding name collisions; as a side
  effect assembly should be much faster now
- debug log system working - custom vsprintf included as well
- created filter for map file - assembly is much faster now
- switched from cygwin to djgpp - much simpler and faster
- player numbers greater than 16 centered
- created swos.h file - header for C files and from now on things are to be done
  in C as much as possible (and not in assembly, unless absolutely necessary)
- util programs ported to Watcom, now only one C compiler is sufficient
