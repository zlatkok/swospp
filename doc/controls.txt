Za interfejs sa joystick-om zaduzeno je sest procedura. Nazvao sam ih:

ReadGamePort
Joy1NormalizeReadings
 |- Joy1NormalizeX
 +- Joy1NormalizeY
Player1StatusProc
Joy1CheckStatus

(za drugi joystick se koriste ekvivalentne procedure)
Slede opisi procedura, od nizih ka visim. Opisuju se samo procedure za prvi
joypad i prvog igraca, procedure za drugi joypad i igraca imaju ekvivalentna
imena, kao i promenljive.

===============================================================================
- ReadGamePort:

Ovo je "najniza" procedura. Ona jednostavno cita u petlji inpute sa game
porta, i smesta ih u promenljive joy1_X, joy1_Y, joy2_X, joy2_Y. Zanimljivo
je da je osa Y na gore negativna, a na dole pozitivna. Odmah na pocetku
proverava joy_kbd_word i ako je 1, odmah izlazi (kontrole su samo tastatura).
Takodje na osnovu joy_kbd_word-a odredjuje da li se citaju vrednosti za joy1
ili joy2. (tj. da li se koristi num_loops_joy1 ili num_loops_joy2, cije su
vrednosti odredjene za vreme kalibracije, i poticu iz setup.dat).
Ova se funkcija poziva jednom u svakom frejmu (iz Flip()).


===============================================================================
- Joy1NormalizeReadings:

Ova procedura samo poziva Joy1NormalizeX i Joy1NormalizeY.


===============================================================================
- Joy1NormalizeX: (Joy1NormalizeY je ekvivalentna)

Uzima vrednost promenljive joy1_X, i zatim ispituje da li je u dozvoljenom
opsegu (na osnovu vrednosti snimljenih za vreme kalibracije - promenljive
joy1_center_X, joy1_min_X, joy1_max_X, joy1_limit, joy1_X_positive_divisor,
joy1_X_negative_divisor). Mora biti:

joy1_min_X <= (joy1_X - joy1_center_X) <= joy1_max_X

Ukoliko je vrednost izvan opsega, dodeljuje se minimalna ili maksimalna
vrednost. A ako je vrednost u opsegu, deli se sa joy1_X_positive ili negative
divisor-om, i zatim opet sa 2. Ta vrednost mora biti veca od joy_limit, ako
nije onda se postavlja minimalna pozitivna ili negativna vrednost.

Dobijenu vrednost dodeljuje promenljivoj
joy1_X_value, i to:

   H.O. bit

       1 - negativne vrednosti (levo ili gore)
       0 - pozitivne vrednosti (dole ili desno)

   ostali bitovi predstavljaju intenzitet

     min. vrednost: 1|0000001
     max. vrednost: 0|1111111

Otprilike signed int (16-bitni).


===============================================================================
- Joy1SetStatus:

Ova procedura proverava vrednosti promenljivih joy1_X_value i
joy1_Y_value, uzima vrednost sa porta za pucanje, i sve to kombinuje u
promenljivu joy1_status.

   bit   7|6|5|4|3|2|1|0 - joy1_status
         | | | | | | | +-- gore
         | | | | | | +---- dole
         | | | | | +------ levo
         | | | | +-------- desno
         | | | +---------- 0 - ne koristi se
         | | +------------ pucanje
         | +-------------- izmene*
         +---------------- 0 - ne koristi se

   * - pucanje i izmene se mapiraju u zavisnosti od vrednosti dodeljene pri
       setup-u, bez obzira koji je broj bita na portu

Promenljive joy1_fire_1 i joy2_fire_2 sadrze redni broj bita koji se koristi
pri mapiranju.


===============================================================================
- Player1StatusProc:

Poziva Joy1SetStatus.
Ukoliko je joy_kbd_word razlicito od 1, koristi se tastatura umesto prvog
joypada, tj. u promenljivu joy1_status se ubacuje control_word, i preskace se
poziv Joy1Status. control_word ima isti format kao joy1_status.

Dalje se uzima joy1_status (bilo tastatura bilo joypad), i na osnovu nje se
popunjavaju promenljive (bajtovi):

            joy1_left
            joy1_right
            joy1_up
            joy1_down
            joy1_fire
            joy1_secondary_fire
            joy1_up_right
            joy1_down_right
            joy1_down_left
            joy1_up_left

u formatu 0 - pritisnuto, -1 - nije.

Takodje se formiraju i joy1_short_fire i joy1_long_fire_counter, po sledecem
algoritmu:

joy1_short_fire = 0;
if (joy1_last_pressed) {
    if (joy1_fire) { // bilo je pucanje, i dalje je
        if (joy1_long_fire_counter) { // pazi na overflow
            joy1_long_fire_counter--;
        }
    } else { // bilo je pucanje, ali je sada prekinuto
        joy1_last_pressed = 0;
        joy1_long_fire_counter = -joy1_long_fire_counter;
        // brojac je sada pozitivan, i oznacava koliko ciklusa je drzano
        // pucanje
    }
} else { // nije bilo pucanja u prethodnom ciklusu
    if (joy1_fire) { // pucanje zapocinje
        joy1_short_fire = 1;
        joy1_last_pressed = 1;
        joy1_long_fire_counter = 0xffff; // resetuj brojac
    }
}

joy1_long_fire_counter se testira u drugim procedurama da bi se proverio da li
je pritisnut sut.

Zatim se formira jos jedna (da, jos jedna!) promenljiva joy1_final_status
(word). Vrednosti su:

                            0 - gore
                            1 - gore desno
                            2 - desno
                            3 - dole desno
                            4 - dole
                            5 - dole levo
                            6 - levo
                            7 - gore levo
                           -1 - nista od toga



===============================================================================
===============================================================================
===============================================================================


                               Tastatura:


Glavna promenljiva za kontrolu tastature je control_word. Ona u obliku bita
sadrzi sve tastere koji su pritisnuti. Format:

                        1 - taster je pritisnut
                        0 - nije

                   bit   7|6|5|4|3|2|1|0 - control_word
                         | | | | | | | +-- gore
                         | | | | | | +---- dole
                         | | | | | +------ levo
                         | | | | +-------- desno
                         | | | +---------- 0 - ne koristi se
                         | | +------------ pucanje
                         | +-------------- 0 - ne koristi se
                         +---------------- ponistava se kada je neki taster od
                                           ovih gore otpusten

Setuje je procedura SetControlWord, na osnovu promenljive scan_code.
SetControlWord se poziva direktno iz keyboard handlera.

Promenljiva controls_status

Nju setuje MenuProc. Pravi se kombinovanjem up, down, left, right, fire i
final_controls_status. Iskljucivo se koriste donje vrednosti.

bit    15 14 13 12 11 10  9  8  7  6  5  4  3  2  1  0
        |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-- pucanje
        |  |  |  |  |  |  |  |  |  |  |  |  |  |  +----- levo
        |  |  |  |  |  |  |  |  |  |  |  |  |  +-------- desno
        |  |  |  |  |  |  |  |  |  |  |  |  +----------- gore
        |  |  |  |  |  |  |  |  |  |  |  +-------------- dole
        |  |  |  |  |  |  |  |  |  |  +----------------- kratko pucanje
        |  |  |  |  |  |  |  |  |  +-------------------- levo
        |  |  |  |  |  |  |  |  +----------------------- desno
        |  |  |  |  |  |  |  +-------------------------- gore
        |  |  |  |  |  |  +----------------------------- dole
        |  |  |  |  |  +--------------------------------
        |  |  |  |  +-----------------------------------
        |  |  |  +--------------------------------------
        |  |  +-----------------------------------------
        |  +--------------------------------------------
        +-----------------------------------------------

===============================================================================
- Int9KeyboardHandler

Direktno prima taster sa porta 60h, i stavlja ga u promenljivu scan_code.
Prethodni taster stavlja u promenljivu scan_code_2. Tastere slaze u key_buffer
velicine 10 bajtova. Broj tastera u baferu sadrzi promenljiva key_count. Zatim
poziva SetControlWord. Ako je pritisnuto F6, poziva nekakvu proceduru verovatno
za debug.

===============================================================================
- GetKey

Uzima taster direktno iz key_buffer-a, ako nije prazan, i pomera sve tastere
jedno mesto ulevo. "Sirovu" vrednost stavlja u promenljivu menu_key, dok
konvertovanu vrednost stavlja u converted_key (konverzija preko tablice
convert_keys_table). Ukoliko je pritisnuto Alt+F1, vraca se u tekstualni mod i
izdaje int3.

===============================================================================
- CheckControls

Dosta zbunjujuce... Jos se proucava.
Ako je joy1_long_fire_counter manje ili jednako nuli, postavlja se na nulu.
Promenljive se kopiraju:

        short_fire
        fire
        left
        right
        up
        down
        final_status
        final_status_2

Posle se ove kopije kopiraju odgovarajuce promenljive od joy2.
Funkcije koje rade sa menijima iskljucivo koriste ove iskopirane vrednosti.

Pseudokod:

call GetKey -> podesi converted_key i menu_key

tmp01 = menu_key;
tmp03 = timer_difference;
if (joy1_long_fire_counter_copy > 0)
    joy1_long_fire_counter_copy = 0;

if (player1_clear_flag == 0) {
    call Player1StatusProc -> podesi sijaset joy promenljivih
         (joy1_long_fire_counter, joy1_fire...)

    if (joy1_long_fire_counter != 0 &&
        (joy1_long_fire_counter_copy = joy1_long_fire_counter) >= 0)
    {
        joy1_long_fire_counter = 0;
    }

    if (joy1_fire == 0) {
        if (contro_001 != 0) {
            put_into_joy1_fire++;
            joy1_fire = put_into_joy1_fire;
            joy1_fire &= 1;
        }
        if (contro_002 != 0) {
            joy1_fire = 1;
        }
    }

    short_fire = joy1_short_fire;
    fire = joy1_fire;
    left = joy1_left;
    right = joy1_right;
    up = joy1_up;
    down = joy1_down;
    final_controls_status = joy1_final_status;
    final_controls_status2 = joy1_final_status;
} else {
    joy1_fire = 0;
    short_fire = 0;
    fire = 0;
    left = 0;
    right = 0;
    up = 0;
    down = 0;
    final_controls_status = -1;
    final_controls_status2 = -1;
}

joy2_fire = 0;

if (player2_clear_flag == 0 && two_players != 0) {
    call Player2StatusProc;
    if (joy2_long_fire_counter != 0 &&
        (joy1_long_fire_counter_copy = joy2_long_fire_counter) >= 0)
    {
        joy2_long_fire_counter = 0;
    }

    if (joy2_fire == 0 && near_joy2_fire != 0)
        joy2_fire = 1;

    short_fire |= joy2_short_fire;
    fire |= joy2_fire;
    left |= joy2_left;
    right |= joy2_right;
    up |= joy2_up;
    down |= joy2_down;

    if (joy1_final_status < 0) {
        final_controls_status = joy2_final_status;
        final_controls_status2 = joy2_final_status;
    }
}

if (fire_reset_flag != 0) { // da li se blokira paljba?
    if (fire != 0) {        // da, da li je trenutno pritisnuto pucanje?
        fire = 0;           // ako jeste, ugasi ga
        short_fire = 0;
    } else {
        fire_reset_flag = 0; // ukoliko nema pucanja, resetuj fleg
    }
}

if (short_fire == 0) { // bez kratkog pucanja u prethodnom ciklusu
    if (fire != 0) {   // nema kratkog pucanja, ali pucanje je u toku - to
        long_fire_time += timer_difference; // znaci da je dugo pucanje u toku
        if (long_fire_time >= 24) { // ako se predugo drzi pucanje
            long_fire_time = 16; // stavi vreme na 16
            long_fire_flag++;
            short_fire = 1;      // izdaj kratko pucanje (za sledeci ciklus)
        }
    }
} else {
    long_fire_time = 0; // ukoliko je bilo kratkog pucanja, onda ne moze biti
    long_fire_flag = 0; // dugackog, resetuj promenljive
}

// ovaj deo ispod je zaduzen za odrzavanje onog finog kratkog zastoja pre nego
// sto tasteri krenu da se ponavljaju - kada se recimo pritisne dole, kursor
// ce se spustiti jedan red dole, malo zastati, a zatim krenuti brzo da ide
// dole

if (fire != 0) goto firing2; // proveri da li se puca
tmp01 = final_controls_status; // ako se ne puca, dozvoli duplo kraci interval
if (tmp01 != last_controls) goto set_controls; // da li se drze kontrole?
controls_held_timer += tmp03; // dodaj timer_difference
if (controls_held_timer < 12) goto reset_controls; // ubijaj kontrole neko
controls_held_timer = 8; // vreme pre nego sto se dozvoli ponavljanje
final_controls_status = tmp01;
goto go_on;

firing2:                      // za pucanje sacekaj malo vise
tmp01 = final_controls_status;
if (tmp01 != last_controls) goto set_controls;
controls_held_timer += tmp03; // timer_difference
if (controls_held_timer < 24) goto reset_controls;
controls_held_timer = 16;
final_controls_status = tmp01;
goto go_on;

reset_controls:
final_controls_status = -1;
goto go_on;

set_controls:
controls_held_timer = 0;
final_controls_status = tmp01;
last_controls = tmp01;

go_on:
if (joy_kbd_word != 5 || inputing_text_ok == -1 || fire != 0 ||
    final_controls_status >= 0)  // 5 = two joypads
    return;

tmp01 = menu_key;

tmp02 = 0;
if (tmp01 == UP)
    goto @@set_final_status;

tmp02 = 2;
if (tmp01 == RIGHT)
    goto @@set_final_status;

tmp02 = 4;
if (tmp01 == DOWN)
    goto @@set_final_status;

tmp02 = 6;
if (tmp01 == LEFT)
    goto @@set_final_status;

if (tmp01 == FIRE)
    goto @@set_final_status;

short_fire = 1;
fire = 1;
return;

@@set_final_status:
final_controls_status = tmp02;